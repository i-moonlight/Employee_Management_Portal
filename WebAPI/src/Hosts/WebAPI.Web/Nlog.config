<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off">

    <variable name="logDirectory" value="${basedir}/logs/${shortdate}"/>

    <extensions>
        <add assembly="NLog.Web.AspNetCore"/>
        <add assembly="NLog.Targets.ElasticSearch"/>
    </extensions>

    <!-- the targets to write to -->
    <targets async="true">
        <target name="console" xsi:type="Console" layout="${message}"/>
        <target name="udp" xsi:type="NLogViewer" address="udp4://localhost:5001"/>
        <target name="tcp" xsi:type="NLogViewer" address="tcp4://localhost:5001"/>

        <!-- Write to SQLServer -->
        <target xsi:type="Database" name="sqlserver"
                dbProvider="Microsoft.Data.SqlClient.SqlConnection, Microsoft.Data.SqlClient">
            <connectionString>
                Data Source=(local);Initial Catalog=EmployeeDB;Persist Security Info=false;Integrated Security=True;
                MultipleActiveResultSets=True;
            </connectionString>
            <commandText>
                insert into "authors".logging(log_date,log_level,log_logger,log_message, stacktrace) values(@time_stamp,
                @level, @logger, @message, @stacktrace);
            </commandText>
            <parameter name="@time_stamp" layout="${longdate}"/>
            <parameter name="@level" layout="${level}"/>
            <parameter name="@logger" layout="${logger}"/>
            <parameter name="@message" layout="${message}"/>
            <parameter name="@stacktrace" layout="${stacktrace}"/>
        </target>

        <!-- Write to File -->
        <target xsi:type="File" name="allfile"
                fileName="${logDirectory}/nlog-all-${shortdate}.log"
                deleteOldFileOnStartup="true"
                concurrentWrites="true"/>

        <!-- Write to Port -->
        <target xsi:type="NLogViewer" name="TcpOutlet" address="tcp4://localhost:5001"/>
        
        <!-- ElasticSearch target-->
        <target name="ElasticSearch" xsi:type="BufferingWrapper" flushTimeout="5000">
            <target xsi:type="ElasticSearch">
            </target>
        </target>
    </targets>

    <!-- rules to map from logger name to target -->
    <rules>
        <logger name="*" minlevel="Debug" writeTo="logfile"/>
        <logger name="Mailer" minlevel="Info" writeTo="email"/>
        <logger name="*" minlevel="Trace" writeTo="console,udp,tcp"/>
        <!-- <logger name="*" minlevel="Debug" writeTo="ElasticSearch"/> -->

        <!-- Can be divided into files -->
        <!--
        <logger name="*" level="Trace" writeTo="fileLogTrace" />
        <logger name="*" level="Debug" writeTo="fileLogDebug" />
        <logger name="*" level="Info" writeTo="fileLogInfo" />
        <logger name="*" level="Warn" writeTo="fileLogWarn" />
        <logger name="*" level="Error" writeTo="fileLogErrors" />
        <logger name="*" level="Fatal" writeTo="fileLogFatal" />-->

        <!-- Write to Mail -->
        <!--<logger name="*" level="Error" writeTo="mail" />-->

        <!-- To one file -->
        <logger name="*" minlevel="Trace" writeTo="allfile"/>

        <!-- To port -->
        <logger name="*" minlevel="Trace" writeTo="TcpOutlet">
            <!--<filters>
              <when condition="contains(logger, 'any')" action="Log" />
              <when condition="contains(logger, 'any')" action="Ignore" />
            </filters>-->
        </logger>
    </rules>
</nlog>